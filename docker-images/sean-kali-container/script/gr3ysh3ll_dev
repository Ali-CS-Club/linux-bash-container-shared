#!/bin/bash

# gr3ysh3ll - Optimized bash wrapper for penetration testing containers
# Author: Enhanced version with configurable parameters

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Colors and formatting
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly BOLD='\033[1m'
readonly NC='\033[0m' # No Color

# Default configuration - can be overridden by environment variables or config file
readonly DEFAULT_IMAGE="fonalex45/gr3ysh3ll:latest"
readonly DEFAULT_SHELL="/bin/zsh"
readonly CONFIG_FILE="$HOME/.gr3ysh3ll.conf"

# Load configuration if exists
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

# Configuration variables with defaults
DOCKER_IMAGE="${GR3Y_IMAGE:-$DEFAULT_IMAGE}"
CONTAINER_SHELL="${GR3Y_SHELL:-$DEFAULT_SHELL}"
HOST_NETWORKING="${GR3Y_HOST_NET:-true}"
ENABLE_X11="${GR3Y_X11:-true}"
ENABLE_GPU="${GR3Y_GPU:-true}"
CUSTOM_CAPS="${GR3Y_CAPS:-NET_ADMIN,CAP_SYS_TIME}"
EXTRA_MOUNTS="${GR3Y_MOUNTS:-}"
WORK_DIR_BASE="${GR3Y_WORKDIR:-$(pwd)}"

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%H:%M:%S')] ${message}${NC}"
}

print_error() { print_status "$RED" "ERROR: $1"; }
print_success() { print_status "$GREEN" "SUCCESS: $1"; }
print_info() { print_status "$BLUE" "INFO: $1"; }
print_warning() { print_status "$YELLOW" "WARNING: $1"; }

# Validation functions
validate_project_name() {
    local project=$1
    if [[ ! "$project" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        print_error "Project name can only contain alphanumeric characters, hyphens, and underscores"
        exit 1
    fi
}

check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker is not installed or not in PATH"
        exit 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker daemon is not running or accessible"
        exit 1
    fi
}

container_exists() {
    local project=$1
    docker container inspect "$project" >/dev/null 2>&1
}

container_running() {
    local project=$1
    [[ "$(docker container inspect -f '{{.State.Running}}' "$project" 2>/dev/null)" == "true" ]]
}

# Enhanced container start function with configurable options
start_container() {
    local project=$1
    local image=${2:-$DOCKER_IMAGE}
    
    validate_project_name "$project"
    check_docker
    
    if container_exists "$project"; then
        print_warning "Container '$project' already exists"
        if container_running "$project"; then
            print_info "Container is running. Use 'enter' command to access it."
        else
            print_info "Container is stopped. Use 'enter' command to start and access it."
        fi
        return 0
    fi
    
    print_info "Creating project structure for '$project'..."
    
    # Create project directory structure
    local project_dir="$WORK_DIR_BASE/$project"
    mkdir -p "$project_dir"/{recon,www,exploit,pivot,privesc,report}
    mkdir -p "$project_dir/.gr3ysh3ll-logs"
    
    cd "$project_dir" || exit 1
    
    print_info "Starting container '$project' with image '$image'..."
    
    # Build docker run command dynamically
    local docker_cmd="docker run --name $project -it"
    
    # Networking
    if [[ "$HOST_NETWORKING" == "true" ]]; then
        docker_cmd="$docker_cmd --net=host"
    fi
    
    # Capabilities
    IFS=',' read -ra CAPS <<< "$CUSTOM_CAPS"
    for cap in "${CAPS[@]}"; do
        docker_cmd="$docker_cmd --cap-add=$cap"
    done
    
    # GPU support
    if [[ "$ENABLE_GPU" == "true" ]] && [[ -d "/dev/dri" ]]; then
        docker_cmd="$docker_cmd --device=/dev/dri:/dev/dri"
    fi
    
    # X11 forwarding
    if [[ "$ENABLE_X11" == "true" ]] && [[ -n "${DISPLAY:-}" ]]; then
        docker_cmd="$docker_cmd -e DISPLAY=$DISPLAY"
        docker_cmd="$docker_cmd -v /tmp/.X11-unix:/tmp/.X11-unix"
        if [[ -f "$HOME/.Xauthority" ]]; then
            docker_cmd="$docker_cmd -v $HOME/.Xauthority:$HOME/.Xauthority"
        fi
    fi
    
    # Environment variables
    docker_cmd="$docker_cmd -e TARGET=$project -e TZ=${TZ:-UTC}"
    [[ -n "${DOMAIN:-}" ]] && docker_cmd="$docker_cmd -e DOMAIN=$DOMAIN"
    [[ -n "${IP:-}" ]] && docker_cmd="$docker_cmd -e IP=$IP"
    
    # Standard mounts
    docker_cmd="$docker_cmd -v $(pwd)/.gr3ysh3ll-logs:/root/.logs:rw"
    docker_cmd="$docker_cmd -v $(pwd):/$project"
    
    # Extra mounts
    if [[ -n "$EXTRA_MOUNTS" ]]; then
        IFS=',' read -ra MOUNTS <<< "$EXTRA_MOUNTS"
        for mount in "${MOUNTS[@]}"; do
            docker_cmd="$docker_cmd -v $mount"
        done
    fi
    
    # Working directory and entrypoint
    docker_cmd="$docker_cmd -w /$project --entrypoint=$CONTAINER_SHELL $image"
    
    print_info "Executing: $docker_cmd"
    eval "$docker_cmd"
}

# Enhanced enter function
enter() {
    local project=$1
    validate_project_name "$project"
    check_docker
    
    if ! container_exists "$project"; then
        print_error "Container '$project' does not exist. Use 'start' command first."
        exit 1
    fi
    
    if ! container_running "$project"; then
        print_info "Starting stopped container '$project'..."
        docker container start "$project" >/dev/null 2>&1
    fi
    
    print_info "Entering container '$project'..."
    docker exec -it "$project" "$CONTAINER_SHELL"
}

# Enhanced stop function
stop() {
    local project=$1
    validate_project_name "$project"
    check_docker
    
    if ! container_exists "$project"; then
        print_warning "Container '$project' does not exist"
        return 0
    fi
    
    if container_running "$project"; then
        print_info "Stopping container '$project'..."
        docker container stop "$project" >/dev/null 2>&1
        print_success "Container '$project' stopped"
    else
        print_info "Container '$project' is already stopped"
    fi
}

# Enhanced destroy function with confirmation
destroy() {
    local project=$1
    local force=${2:-false}
    
    validate_project_name "$project"
    check_docker
    
    if ! container_exists "$project"; then
        print_warning "Container '$project' does not exist"
        if [[ -d "$WORK_DIR_BASE/$project" ]]; then
            print_info "Project directory exists. Removing..."
            rm -rf "$WORK_DIR_BASE/$project"
            print_success "Project directory removed"
        fi
        return 0
    fi
    
    if [[ "$force" != "true" ]]; then
        echo -n "Are you sure you want to destroy container '$project' and its data? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            print_info "Operation cancelled"
            return 0
        fi
    fi
    
    print_info "Destroying container '$project'..."
    docker container rm -f "$project" >/dev/null 2>&1
    
    if [[ -d "$WORK_DIR_BASE/$project" ]]; then
        rm -rf "$WORK_DIR_BASE/$project"
        print_success "Container and project directory destroyed"
    else
        print_success "Container destroyed"
    fi
}

# Enhanced backup function
backup() {
    local project=$1
    local backup_dir=${2:-"./backups"}
    
    validate_project_name "$project"
    
    local project_path="$WORK_DIR_BASE/$project"
    if [[ ! -d "$project_path" ]]; then
        print_error "Project directory '$project_path' does not exist"
        exit 1
    fi
    
    mkdir -p "$backup_dir"
    local timestamp=$(date '+%Y-%m-%d_%H-%M-%S%z')
    local backup_file="$backup_dir/${timestamp}_${project}.zip"
    
    print_info "Creating backup of '$project'..."
    
    if command -v zip >/dev/null 2>&1; then
        zip -r "$backup_file" "$project_path" >/dev/null 2>&1
        print_success "Backup created: $backup_file"
    else
        # Fallback to tar if zip is not available
        local tar_file="$backup_dir/${timestamp}_${project}.tar.gz"
        tar -czf "$tar_file" -C "$WORK_DIR_BASE" "$project"
        print_success "Backup created: $tar_file"
    fi
}

# Image management functions
pull_image() {
    local image=${1:-$DOCKER_IMAGE}
    check_docker
    print_info "Pulling image '$image'..."
    docker pull "$image"
    print_success "Image '$image' updated"
}

list_containers() {
    check_docker
    print_info "gr3ysh3ll containers:"
    docker ps -a --filter "name=" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E "(fonalex45/gr3ysh3ll|NAMES)" || print_info "No gr3ysh3ll containers found"
}

# Configuration management
create_config() {
    cat > "$CONFIG_FILE" << EOF
# gr3ysh3ll configuration file
# Uncomment and modify variables as needed

# Docker image to use
# GR3Y_IMAGE="fonalex45/gr3ysh3ll:latest"

# Shell to use inside container
# GR3Y_SHELL="/bin/zsh"

# Enable host networking
# GR3Y_HOST_NET="true"

# Enable X11 forwarding
# GR3Y_X11="true"

# Enable GPU support
# GR3Y_GPU="true"

# Additional capabilities (comma-separated)
# GR3Y_CAPS="NET_ADMIN,CAP_SYS_TIME"

# Extra mounts (comma-separated, format: host:container)
# GR3Y_MOUNTS="/opt/wordlists:/wordlists:ro"

# Base working directory
# GR3Y_WORKDIR="$(pwd)"
EOF
    print_success "Configuration file created at $CONFIG_FILE"
    print_info "Edit the file to customize your settings"
}

# Help function
show_help() {
    local tag
    tag=$(git ls-remote --tags --sort="v:refname" https://github.com/alexrf45/gr3ysh3ll.git 2>/dev/null |
        grep -o 'refs/tags/v.*' |
        sed 's|refs/tags/||' |
        grep -v '\^{}' |
        tail -n 1) || tag="unknown"

    cat << 'EOF'
 ░▒▓██████▓▒░  ░▒▓███████▓▒░  ░▒▓███████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░  ░▒▓███████▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░        ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        
░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        
░▒▓█▓▒▒▓███▓▒░ ░▒▓███████▓▒░  ░▒▓███████▓▒░   ░▒▓██████▓▒░   ░▒▓██████▓▒░  ░▒▓████████▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░        ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░    ░▒▓█▓▒░            ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░    ░▒▓█▓▒░            ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        
 ░▒▓██████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░     ░▒▓█▓▒░     ░▒▓███████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓████████▓▒░ ░▒▓████████▓▒░ 
EOF

    echo -e "\n${BOLD}${GREEN}Current Image version: ${tag}${NC}\n"
    
    echo -e "${YELLOW}USAGE:${NC}"
    echo "  $(basename "$0") <command> [arguments]"
    echo
    echo -e "${YELLOW}COMMANDS:${NC}"
    echo "  start <project> [image]     - Start a new container"
    echo "  enter <project>             - Enter a running container"
    echo "  stop <project>              - Stop a container"
    echo "  destroy <project> [--force] - Destroy container and data"
    echo "  backup <project> [dir]      - Backup project data"
    echo "  pull [image]                - Pull/update image"
    echo "  dev                         - Pull development image"
    echo "  list                        - List all containers"
    echo "  config                      - Create configuration file"
    echo "  help                        - Show this help"
    echo
    echo -e "${YELLOW}EXAMPLES:${NC}"
    echo "  $(basename "$0") start myproject"
    echo "  $(basename "$0") start myproject fonalex45/gr3ysh3ll:dev"
    echo "  $(basename "$0") backup myproject ./my-backups"
    echo "  $(basename "$0") destroy myproject --force"
    echo
    echo -e "${YELLOW}CONFIGURATION:${NC}"
    echo "  Configuration file: $CONFIG_FILE"
    echo "  Run '$(basename "$0") config' to create a configuration file"
    echo
    echo -e "${YELLOW}ENVIRONMENT VARIABLES:${NC}"
    echo "  GR3Y_IMAGE    - Docker image to use"
    echo "  GR3Y_SHELL    - Shell to use inside container"
    echo "  GR3Y_HOST_NET - Enable host networking (true/false)"
    echo "  GR3Y_X11      - Enable X11 forwarding (true/false)"
    echo "  GR3Y_GPU      - Enable GPU support (true/false)"
    echo "  GR3Y_CAPS     - Additional capabilities (comma-separated)"
    echo "  GR3Y_MOUNTS   - Extra mounts (comma-separated)"
    echo "  GR3Y_WORKDIR  - Base working directory"
}

# Main command dispatcher
main() {
    case "${1:-help}" in
        "start")
            [[ $# -lt 2 ]] && { print_error "Project name required"; show_help; exit 1; }
            start_container "$2" "${3:-}"
            ;;
        "enter")
            [[ $# -lt 2 ]] && { print_error "Project name required"; exit 1; }
            enter "$2"
            ;;
        "stop")
            [[ $# -lt 2 ]] && { print_error "Project name required"; exit 1; }
            stop "$2"
            ;;
        "destroy")
            [[ $# -lt 2 ]] && { print_error "Project name required"; exit 1; }
            destroy "$2" "${3:-false}"
            ;;
        "backup")
            [[ $# -lt 2 ]] && { print_error "Project name required"; exit 1; }
            backup "$2" "${3:-}"
            ;;
        "pull")
            pull_image "${2:-}"
            ;;
        "dev")
            pull_image "fonalex45/gr3ysh3ll:dev"
            ;;
        "list")
            list_containers
            ;;
        "config")
            create_config
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"